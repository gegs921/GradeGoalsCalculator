{"version":3,"sources":["js/script.js"],"names":["Object","defineProperty","Array","prototype","enumerable","value","task","Promise","resolve","reject","forEach","item","index","array","is","length","status","count","scores","fnum","snum","percentage","category","id","weights","weight","pointsPossible","pointsEarned","score","maximumPossibleIncrease","Vue","component","template","props","methods","deleteWeight","selectedId","i","splice","deleteScore","app","el","data","type","weightsFull","classGrade","goalPercentage","recommendedCategoryOfImprovement","selectedCategoryOfImprovement","percentageToRaise","neededScore","numAssignmentsToComplete","finalAssignmentPercentage","howButtonSectionVisible","howSectionVisible","errorText","errorType","errorShown","errorTypes","assignmentAdditionError","categoryAdditionError","goalCalculationError","user","loginButtonText","loginButtonHREF","idNum","addScore","isNaN","push","parseFloat","Math","round","addWeight","sum","console","log","changeAssignmentCategory","event","target","options","selectedIndex","text","changeAssignmentCategoryOfImprovement","calculateGrade","vm","weightedScore","asyncForEach","then","weight2","weight3","weight4","maxPossibleIncreaseSorted","sort","calculateMethods","weightsArr","side1","parseInt","multiplierWeight","categorySpecificScores","numScores","numeratorSum","denominatorSum","categoryPercentage","step1","step2","numAssignments","calculateAssignment","ceil","showHowSection","hideError","getUser","axios","get","response","catch","error","logOut","window","location","href","changeLoginButton","email","goToLoginPageOrLogoutPage","beforeMount"],"mappings":"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","file":"script.e4c402d3.js","sourceRoot":"../public","sourcesContent":["Object.defineProperty(Array.prototype, \"asyncForEach\", {\n  enumerable: false,\n  value: function (task) {\n    return new Promise((resolve, reject) => {\n      this.forEach(function (item, index, array) {\n        task(item, index, array);\n        if (Object.is(array.length - 1, index)) {\n          resolve({ status: 'finished', count: array.length })\n        }\n      });\n    })\n  }\n});\n\nlet scores = [\n  {\n    fnum: 10,\n    snum: 10,\n    percentage: 100,\n    category: 'hw',\n    id: 1\n  },\n  {\n    fnum: 8,\n    snum: 10,\n    percentage: 80,\n    category: 'prj',\n    id: 2\n  },\n  {\n    fnum: 7,\n    snum: 10,\n    percentage: 100,\n    category: 'tst',\n    id: 3\n  }\n];\nlet weights = [\n  {\n    weight: 0.1,\n    category: 'hw',\n    pointsPossible: 0,\n    pointsEarned: 0,\n    score: 0,\n    maximumPossibleIncrease: 0,\n    id: 4\n  },\n  {\n    weight: 0.2,\n    category: 'prj',\n    pointsPossible: 0,\n    pointsEarned: 0,\n    score: 0,\n    maximumPossibleIncrease: 0,\n    id: 5\n  },\n  {\n    weight: 0.7,\n    category: 'tst',\n    pointsPossible: 0,\n    pointsEarned: 0,\n    score: 0,\n    maximumPossibleIncrease: 0,\n    id: 6\n  }\n];\n\nVue.component('weights-comp', {\n  template: '<li class=\"field\">{{ weight.category }}: {{ weight.weight }} <button v-on:click=\"deleteWeight(weight.id)\" class=\"button\">delete</button></li>',\n  props: {\n    weight: Object\n  },\n  methods: {\n    deleteWeight: function (selectedId) {\n      for (let i = 0; i < weights.length; i++) {\n        if (weights[i].id === selectedId) {\n          weights.splice(i, 1);\n        }\n      }\n    }\n  }\n})\n\nVue.component('percent-comp', {\n  template: '<li class=\"field\">{{ score.category }}: {{ score.fnum }} / {{ score.snum }}: {{ score.percentage }}% <button v-on:click=\"deleteScore(score.id)\" class=\"button\">delete</button></li>',\n  props: {\n    score: Object\n  },\n  methods: {\n    deleteScore: function (selectedId) {\n      for (let i = 0; i < scores.length; i++) {\n        if (scores[i].id === selectedId) {\n          scores.splice(i, 1);\n        }\n      }\n    }\n  }\n})\n\nlet app = new Vue({\n  el: '#app',\n  data: {\n    fnum: '',\n    snum: '',\n    weight: '',\n    type: '',\n    scores: scores,\n    weights: weights,\n    weightsFull: false,\n    classGrade: 0,\n    category: '',\n    goalPercentage: '',\n    recommendedCategoryOfImprovement: '',\n    selectedCategoryOfImprovement: '',\n    percentageToRaise: 0,\n    neededScore: '',\n    numAssignmentsToComplete: '',\n    finalAssignmentPercentage: '',\n    howButtonSectionVisible: false,\n    howSectionVisible: false,\n    errorText: '',\n    errorType: '',\n    errorShown: false,\n    errorTypes: {\n      assignmentAdditionError: 1,\n      categoryAdditionError: 2,\n      goalCalculationError: 3,\n    },\n    user: {},\n    loginButtonText: \"Log in\",\n    loginButtonHREF: \"/login\",\n    idNum: 0,\n  },\n  methods: {\n    addScore: function () {\n      if (isNaN(this.fnum) === false && isNaN(this.snum) === false && this.fnum !== '' && this.snum !== '' && this.category !== '') {\n        scores.push({\n          fnum: parseFloat(this.fnum, 10),\n          snum: parseFloat(this.snum, 10),\n          percentage: Math.round(this.fnum / this.snum * 100),\n          category: this.category,\n          id: this.idNum\n        })\n        this.idNum += 1;\n        this.errorShown = false;\n        // console.log(typeof(this.fnum));\n        // console.log(typeof(this.snum));\n      }\n      else if(isNaN(this.fnum) === true){\n        this.errorType = this.errorTypes.assignmentAdditionError;\n        this.errorText = \"Assignment Score Numerator should be a number.\";\n        this.errorShown = true;\n        return;\n      }\n      else if(isNaN(this.snum) === true) {\n        this.errorType = this.errorTypes.assignmentAdditionError;\n        this.errorText = \"Assignment Score Denominator should be a number.\";\n        this.errorShown = true;       \n        return; \n      }\n      else if(this.fnum === '') {\n        this.errorType = this.errorTypes.assignmentAdditionError;\n        this.errorText = \"Please enter an Assignment Score Numerator\";\n        this.errorShown = true;       \n        return;         \n      }\n      else if(this.snum === '') {\n        this.errorType = this.errorTypes.assignmentAdditionError;\n        this.errorText = \"Please enter an Assignment Score Denominator\";\n        this.errorShown = true;       \n        return;        \n      }\n      else {\n        this.errorType = this.errorTypes.assignmentAdditionError;\n        this.errorText = \"Please select an Assignment Category\";\n        this.errorShown = true;       \n        return;\n      }\n    },\n    addWeight: function () {\n      let sum = 0;\n      for (let i = 0; i < weights.length; i++) {\n        if (sum !== 1) {\n          sum = weights[i].weight + sum;\n          console.log(sum);\n        }\n      }\n      if (isNaN(this.weight) === false && this.weight !== '' && this.type !== '' && sum !== 1) {\n        weights.push({\n          weight: this.weight / 100,\n          category: this.type,\n          pointsPossible: 0,\n          pointsEarned: 0,\n          score: 0,\n          maximumPossibleIncrease: 0,\n          id: this.idNum\n        });\n        this.idNum += 1;\n      }\n      else if(isNaN(this.weight) === true) {\n        this.errorType = this.errorTypes.categoryAdditionError;\n        this.errorText = \"Category Weight should be a number.\";\n        this.errorShown = true;\n        return;\n      }\n      else if(this.weight === '') {\n        this.errorType = this.errorTypes.categoryAdditionError;\n        this.errorText = \"Please enter a category weight.\";\n        this.errorShown = true;\n        return;\n      }\n      else if(this.type === '') {\n        this.errorType = this.errorTypes.categoryAdditionError;\n        this.errorText = \"Please enter a category type\";\n        this.errorShown = true;\n        return;\n      }\n      else {\n        this.errorType = this.errorTypes.categoryAdditionError;\n        this.errorText = \"The weights of the categories already have a sum of 100%\";\n        this.errorShown = true;\n        return;\n      }\n    },\n    changeAssignmentCategory: function (event) {\n      this.category = event.target.options[event.target.options.selectedIndex].text;\n    },\n    changeAssignmentCategoryOfImprovement: function (event) {\n      this.selectedCategoryOfImprovement = event.target.options[event.target.options.selectedIndex].text;\n    },\n    calculateGrade: function () {\n      vm = this;\n      let weightedScore = 0;\n      weights.forEach((weight) => {\n        weight.pointsEarned = 0;\n        weight.pointsPossible = 0;\n      })\n      weights.asyncForEach((weight) => {\n        scores.asyncForEach((score) => {\n          if (score.category === weight.category) {\n            weight.pointsPossible += score.snum;\n            weight.pointsEarned += score.fnum;\n          }\n        })\n      }).then(() => {\n        weights.asyncForEach((weight2) => {\n          if (weight2.pointsEarned === 0 && weight2.pointsPossible === 0) {\n            weight2.score = 0;\n          }\n          else {\n            weight2.score = weight2.pointsEarned / weight2.pointsPossible;\n          }\n        }).then(() => {\n          weights.asyncForEach((weight3) => {\n            weight3.score = weight3.score * weight3.weight;\n          }).then(() => {\n            weights.asyncForEach((weight4) => {\n              weightedScore += weight4.score;\n            }).then(() => {\n              this.classGrade = weightedScore * 100;\n              let maxPossibleIncreaseSorted = [];\n              weights.forEach((weight) => {\n                weight.maximumPossibleIncrease = weight.weight - weight.score;\n              });\n              weights.asyncForEach((weight) => {\n                maxPossibleIncreaseSorted.push(weight.maximumPossibleIncrease);\n              }).then(() => {\n                maxPossibleIncreaseSorted.sort();\n                vm.recommendedCategoryOfImprovement = maxPossibleIncreaseSorted[maxPossibleIncreaseSorted.length - 1];\n                console.log(vm.recommendedCategoryOfImprovement);\n              });\n            });\n          });\n        });\n      });\n    },\n    calculateMethods: function () {\n      //error handling\n      if (this.goalPercentage !== '' && isNaN(this.goalPercentage) === false && this.selectedCategoryOfImprovement !== '') {\n        console.log('ran');\n        const vm = this;\n        let weightsArr = [];\n        let selectedCategoryOfImprovement = this.selectedCategoryOfImprovement;\n        let goalPercentage = this.goalPercentage\n        //Calculates the amount the score of a category can increase\n\n        function calculateNeededCategoryScoreIncrease() {\n          let side1Percentage = parseInt(goalPercentage, 10);\n          let side1 = side1Percentage / 100;\n          let multiplierWeight;\n          weights.asyncForEach((weight) => {\n            if (weight.category == selectedCategoryOfImprovement) {\n              multiplierWeight = weight.weight;\n            }\n            else if (weight.category !== selectedCategoryOfImprovement) {\n              weightsArr.push(weight.score);\n            }\n          }).then(() => {\n            let sum = 0;\n            weightsArr.asyncForEach((weight) => {\n              sum += weight;\n            }).then(() => {\n              side1 -= sum;\n              vm.percentageToRaise = (side1 / multiplierWeight) * 100;\n              multiplierWeight = 0;\n              sum = 0;\n            });\n          });\n        }\n\n        function calculateAssignmentsNeeded() {\n          let categorySpecificScores = [];\n          let numScores = 0;\n          let numeratorSum = 0;\n          let denominatorSum = 0;\n          let numeratorAvg;\n          let denominatorAvg;\n          let percentageAvg;\n          scores.asyncForEach((score) => {\n            if (score.category == selectedCategoryOfImprovement) {\n              categorySpecificScores.push({\n                fnum: score.fnum,\n                snum: score.snum\n              })\n            }\n          }).then(() => {\n            categorySpecificScores.asyncForEach((score) => {\n              // Do average code here\n              numScores += 1;\n              numeratorSum += score.fnum;\n              denominatorSum += score.snum;\n              numeratorAvg = numeratorSum / numScores;\n              denominatorAvg = denominatorSum / numScores;\n\n              // console.log(numeratorAvg, denominatorAvg);\n            }).then(() => {\n              let categoryPercentage;\n              let step1;\n              let step2;\n\n              let extraPercentage;\n              let numAssignments = 1;\n              function calculateAssignment() {\n                if (numAssignments === 1) {\n                  categoryPercentage = (numeratorSum / denominatorSum) * 100;\n                  step1 = vm.percentageToRaise * (numScores + 1);\n                  step2 = Math.ceil(step1 - categoryPercentage);\n                }\n                else if (numAssignments > 1) {\n                  categoryPercentage = (categoryPercentage + 100) / 2;\n                  step1 = vm.percentageToRaise * (numScores + 1);\n                  step2 = Math.ceil(step1 - categoryPercentage);\n                }\n                if (step2 > 100) {\n                  extraPercentage = step2 - 100;\n                  numAssignments += 1;\n                  calculateAssignment();\n                }\n                else {\n                  vm.numAssignmentsToComplete = numAssignments - 1;\n                  vm.finalAssignmentPercentage = step2;\n                  return;\n                }\n              }\n              calculateAssignment();\n            })\n          });\n        }\n\n        calculateNeededCategoryScoreIncrease();\n        calculateAssignmentsNeeded();\n        this.howButtonSectionVisible = true;\n        return;\n      }\n      else if(this.goalPercentage === '') {\n        this.errorType = this.errorTypes.goalCalculationError;\n        this.errorText = \"Please enter a goal percentage.\";\n        this.errorShown = true;\n        return;\n      }\n      else if(isNaN(this.goalPercentage) === true) {\n        this.errorType = this.errorTypes.goalCalculationError;\n        this.errorText = \"Goal percentage should be a number.\";\n        this.errorShown = true;\n        return;\n      }\n      else {\n        this.errorType = this.errorTypes.goalCalculationError;\n        this.errorText = \"Please select a category to improve upon.\";\n        this.errorShown = true;\n        return;\n      }\n    },\n    showHowSection: function () {\n      this.howSectionVisible = true;\n    },\n    hideError: function() {\n      this.errorShown = false;\n    },\n    getUser: function() {\n      axios.get('http://localhost:3000/user').then((response) => {\n        this.user = response;\n      }).catch((error) => {\n        console.log(error.response);\n      })\n    },\n    logOut: function() {\n      window.location.href = \"/logout\";\n    },\n    changeLoginButton: function() {\n      axios.get('http://localhost:3000/user').then((response) => {\n        console.log(response);\n        if (!response.data.email) {\n          this.loginButtonText = \"Log in\";\n        }\n        else {\n          this.loginButtonText = \"Log out\";\n          this.loginButtonHREF = \"/logout\";\n        }\n      })\n    },\n    goToLoginPageOrLogoutPage: function() {\n      if(this.loginButtonText === \"Log in\") {\n        window.location.href = \"/login\";\n      }\n      if(this.loginButtonText === \"Log out\") {\n        window.location.href = \"/logout\";\n      }\n    }\n  },\n  beforeMount() {\n    this.getUser();\n    this.changeLoginButton();\n  }\n})"]}